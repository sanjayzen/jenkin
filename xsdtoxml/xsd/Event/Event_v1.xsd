<?xml version="1.0" encoding="utf-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xmlns:evlog="http://contracts.it.nednet.co.za/data/esm/Event"
	targetNamespace="http://contracts.it.nednet.co.za/data/esm/Event">


	<xs:complexType name="Event">
		<xs:sequence>

			<xs:element name="eventOccurredDateTimeStamp" type="xs:dateTime"
				minOccurs="1" maxOccurs="1">

				<xs:annotation>
					<xs:documentation>Captures the datetime with timeZone at which the
						event is being occurred at the source system
					</xs:documentation>
				</xs:annotation>
			</xs:element>

			<xs:element name="systems" type="evlog:Systems" minOccurs="1"
				maxOccurs="1" />


			<xs:element name="objectDetails" type="evlog:ObjectDetails"
				minOccurs="1" maxOccurs="1" />



			<xs:element name="objectProcessingPriority" type="xs:int"
				minOccurs="0">
				<xs:annotation>
					<xs:documentation>Classifies the information according to the
						priority or importance of the object or process.
						possible value can
						be between 1 to 99
					</xs:documentation>
				</xs:annotation>
			</xs:element>

			<xs:element name="objectAction" type="evlog:ObjectAction"
				minOccurs="1" maxOccurs="1" />


			<xs:element name="objectOwner" type="evlog:ObjectOwner"
				minOccurs="1" maxOccurs="1" />


		</xs:sequence>
	</xs:complexType>



	<xs:complexType name="Systems">
		<xs:sequence>

			<xs:element name="sourceSystemName" minOccurs="1"
				maxOccurs="1">
				<xs:annotation>
					<xs:documentation>Source System Name(Logging system)
					</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:minLength value="1" />
						<xs:maxLength value="64" />
					</xs:restriction>
				</xs:simpleType>

			</xs:element>

			<xs:element name="sourceSystemServerAddress" minOccurs="0"
				maxOccurs="1">

				<xs:annotation>
					<xs:documentation>file system server name or ip address
					</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:string">

						<xs:maxLength value="64" />
					</xs:restriction>
				</xs:simpleType>

			</xs:element>

			<xs:element name="intermediaryChannel" minOccurs="0">

				<xs:annotation>
					<xs:documentation>intermediary Channal name(connect-direct, MQ,
						fileframe)
					</xs:documentation>
				</xs:annotation>

				<xs:simpleType>
					<xs:restriction base="xs:string">

						<xs:maxLength value="64" />
					</xs:restriction>
				</xs:simpleType>
			</xs:element>

			<xs:element name="destination" minOccurs="0">

				<xs:annotation>
					<xs:documentation>The very next known destination of the object. It
						is normally a file folder in case of file share mechanism; connect
						direct node, ftp server and folder etc.
					</xs:documentation>
				</xs:annotation>

				<xs:simpleType>
					<xs:restriction base="xs:string">

						<xs:maxLength value="2048" />
					</xs:restriction>
				</xs:simpleType>
			</xs:element>

		</xs:sequence>
	</xs:complexType>


	<xs:complexType name="ObjectDetails">
		<xs:sequence>

			<xs:element name="object" minOccurs="1" maxOccurs="1">

				<xs:annotation>
					<xs:documentation>In case of batch file must contains file name
						with file path.
						In case of online this field must contains mandate
						reference number
					</xs:documentation>
				</xs:annotation>

				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:minLength value="1" />
						<xs:maxLength value="256" />
					</xs:restriction>
				</xs:simpleType>

			</xs:element>
			<xs:element name="eventObjectBusinessType" type="evlog:EventObjectBusinessType"
				minOccurs="1" maxOccurs="1">

				<xs:annotation>
					<xs:documentation>this field indicate if event is being logged
						belong to mendate or collection.
						Possibal values:
						1. mandate: for
						mandate , 2. collection: for collection , 3. Client
						On Boarding:
						for client on boarding 4.other :in case of other
					</xs:documentation>
				</xs:annotation>


			</xs:element>

			<xs:element name="eventObjectSchemaDefinition" minOccurs="0">

				<xs:annotation>
					<xs:documentation>Message type used by business function ex.
						Pain.009,Pain.010
					</xs:documentation>
				</xs:annotation>

				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:maxLength value="32" />
					</xs:restriction>
				</xs:simpleType>
			</xs:element>


		</xs:sequence>
	</xs:complexType>


	<xs:complexType name="ObjectAction">
		<xs:sequence>

			<xs:element name="eventAction" type="evlog:EventAction"
				minOccurs="1" maxOccurs="1">

				<xs:annotation>
					<xs:documentation>The unique identifier of the Event Type. Event
						Type distinguishes between Events according to their inherent
						characteristics.
						Systems should know what kind of event they need
						to log and shoud inform
						to event logger ,so that can be added to
						event type
						ex:
						1. received
						2.validate
						3.processed 4.rename
						5.delivered
					</xs:documentation>
				</xs:annotation>
			</xs:element>

			<xs:element name="eventActionOutCome" type="evlog:EventActionOutCome"
				minOccurs="1" maxOccurs="1">

				<xs:annotation>
					<xs:documentation>Indicates if the action on the object for which
						the event is being written is successful or not.
						Possibal values:
						1.success: for Positive event , 2. technicalerror: for technical
						error
						3.businesserror : for business error 4. warning: for any
						warning
					</xs:documentation>
				</xs:annotation>
			</xs:element>

			<xs:element name="eventActionOutComeMessage" minOccurs="0">

				<xs:annotation>
					<xs:documentation>In case of eventActionOutCome value "Success"
						this field should "success"
						in case of any error or warning should
						contains error or warning
						message
					</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:string">

						<xs:maxLength value="1024" />
					</xs:restriction>
				</xs:simpleType>
			</xs:element>

			<xs:element name="eventActionErrorDetail" minOccurs="0">

				<xs:annotation>
					<xs:documentation>In case of error this field will contains full
						trace object.
					</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:maxLength value="16384" />
					</xs:restriction>
				</xs:simpleType>
			</xs:element>

			<xs:element name="eventActionTraceId" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Unique number to track negative event
					</xs:documentation>
				</xs:annotation>

				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:maxLength value="128" />
					</xs:restriction>
				</xs:simpleType>
			</xs:element>
		</xs:sequence>
	</xs:complexType>


	<xs:complexType name="ObjectOwner">
		<xs:sequence>

			<xs:element name="involvedPartyIdType" minOccurs="0">

				<xs:annotation>
					<xs:documentation>It classifies the type of identity (client id,
						profile number, CIS number, etc)
					</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:string">

						<xs:maxLength value="32" />
					</xs:restriction>
				</xs:simpleType>
			</xs:element>


			<xs:element name="involvedPartyId" minOccurs="0">

				<xs:annotation>
					<xs:documentation>Unique ID of the actual client initiating message
						or file transfer
					</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:string">

						<xs:maxLength value="32" />
					</xs:restriction>
				</xs:simpleType>
			</xs:element>

		</xs:sequence>
	</xs:complexType>

	<xs:simpleType name="EventActionOutCome">
		<xs:restriction base="xs:string">
			<xs:enumeration value="success" />
			<xs:enumeration value="technicalerror" />
			<xs:enumeration value="businesserror" />
			<xs:enumeration value="warning" />


		</xs:restriction>
	</xs:simpleType>




	<xs:simpleType name="EventObjectBusinessType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="mandate:" />
			<xs:enumeration value="collection" />
			<xs:enumeration value="clientonboarding" />
			<xs:enumeration value="other" />

		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="EventAction">
		<xs:restriction base="xs:string">

			<xs:enumeration value="received" />
			<xs:enumeration value="validate" />
			<xs:enumeration value="processed" />
			<xs:enumeration value="rename" />
			<xs:enumeration value="delivered" />
		</xs:restriction>
	</xs:simpleType>
	
	
	

</xs:schema>
